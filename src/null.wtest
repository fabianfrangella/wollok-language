object extendedAssert {
	method assertException(closure, msg) {
		try {
			closure.apply()
		} catch e: Exception {
		var message = e.getMessage()
		if (e.getCause() != null) {
			message = e.getCause().getMessage()
		}
					
		}
					
	}
}

		
class Golondrina { var energia = 0 }

object pepita {
	var energia
	method energia() { return energia }
		
	method volar(metros) { energia -= metros * 10 }
	method comer(comida) { 
		energia += comida.energia()
	}
}

object alpiste {
	method energia() = 2	
}
		
describe "Null Test Case"{
	
	/* 
	test "Define assert with message" {
		assert.equals(msg, message)
	}*/
			

	test "messageSentToNull" {
		var a = null
		extendedAssert.assertException({ a.sayHi() }, "Reference a is not initialized")
	}

	
	test "numberOperatorsSentToNull" {
	
		extendedAssert.assertException({ null + 3 }, "null does not understand +")
		extendedAssert.assertException({ null - 3 }, "null does not understand -")
		extendedAssert.assertException({ null * 3 }, "null does not understand *")
		extendedAssert.assertException({ null / 3 }, "null does not understand /")
	
	}
	
	/* 
	test "booleanOperatorsSentToNull" {
		extendedAssert.assertException({ null || null }, "null does not understand ||")
		extendedAssert.assertException({ null && null }, "null does not understand &&")
		
	}*/
	
	
	test "equalEqualOperatorSentToNull" {
		
		var valorNulo
		//Just to check if the null can be tested against a WKO
		//Cannot be performed directly because you should not use comparison over WKO
		var x = assert
			
		assert.notThat(null == 8)
		assert.notThat(null == "pepe")
		assert.notThat(null == 3.0)
		assert.notThat(null == 1..2)
		assert.notThat(null == [1,2,3])
		assert.notThat(null == #{1,2,3})
		assert.notThat(null == x)
		assert.notThat(null == new Golondrina())
		assert.notThat(valorNulo == 8)
		assert.that(valorNulo == null)
		assert.notThat(valorNulo != null)
		
		}
		
	
	
	test "equalEqualOperatorWithANullArgument" {
	
			assert.notThat(8 == null)
			assert.notThat("pepe" == null)
			//assert.notThat(false == null)
			assert.notThat(2.0 == null)
			assert.notThat(1..2 == null)
			assert.notThat([1,2,3] == null)
			assert.notThat(#{1,2,3} == null)
			assert.notThat(assert == null)
			assert.notThat(new Golondrina() == null)
		
	}
	
	
	test "ifInANullExpression" {
		
		var expresionNula
		var mensajeError
		try {
			if (expresionNula) {
				assert.fail("Null Expression didn't fail!")
			}
		} catch e: Exception {
			mensajeError = e.getMessage()
		}
		assert.equals("No puede utilizar null en una sentencia if", mensajeError)
	
	}
	
	test "nullInAOpMultiAndPostFix" {

		assert.throwsException({ pepita.comer(alpiste)})
	
	}
	
	test "nullInAOpMultiAndPostFix2" {

		assert.throwsException({ pepita.volar(10)})
			
	}
	
	test "checkNullByIdentity"{
		
		var a = null
		assert.that(a == null)
		assert.notThat(a != null)
		assert.that(a === null)
		assert.notThat(a !== null)			
		assert.notThat(1 === null)
		assert.that(1 !== null)			
		
		assert.notThat(1 === 2)
		assert.that(1 !== 2)						
		
	}
}
	
	