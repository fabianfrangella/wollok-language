import singletons.*

describe "Singletons"{
	
	test "compare identity of three literal objects"{
		const ob1 = object {}
		const ob2 = object {}
		const ob3 = ob1
		
		assert.that(ob1 === ob1)
		assert.that(ob1 !== ob2)
		assert.that(ob1 === ob3)
	}
	
	test "compare equality of three literal objects"{
		const ob1 = object {}
		const ob2 = object {}
		const ob3 = ob1
		
		assert.that(ob1 == ob1)
		assert.that(ob1 != ob2)
		assert.that(ob1 == ob3)
	}
	
	test "compare identity of three strings"{
		const ob1 = "hola"
		const ob2 = "hola"
		const ob3 = ob1
		
		assert.that(ob1 === ob1)
		assert.that(ob1 !== ob2)
		assert.that(ob1 === ob3)
	}
		
	test "compare equality of three strings"{
		const ob1 = "hola"
		const ob2 = "hola"
		const ob3 = ob1
		
		assert.that(ob1 == ob1)
		assert.that(ob1 == ob2)
		assert.that(ob1 == ob3)
	}
	
	test "literal object with instance variables and a simple return method"{
		
		const myObject = object {
			var a
			method a(_a){
				a = _a
			}
		    method m(b) = a * b
		}
		myObject.a(2)
		
		assert.equals(4, myObject.m(2))
	}

	test "objects that inherits from a class"{
		assert.that(o.m()==5)
	}
	
	test "object that inherit from a class with explicit builders"{
		assert.that(o2.m()==6)
	}	
	
	test "object that inherit from a class and have a mixin"{
		assert.that(o3.m()==6)
		assert.that(o3.z()==10)
	}	
	
	test "object thats have multiple mixins"{
		assert.that(o4.z2()==11)
		assert.that(o4.z()==10)
	}	
	
	test "object that inherit from a class and have multiple mixins"{
		assert.that(o5.m()==6)
		assert.that(o5.z2()==11)
		assert.that(o5.z()==10)
	}	
	
	
}
