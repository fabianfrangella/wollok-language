object p {
	var modified = {false}.apply()
				
	method getModifying() {
		modified = {true}.apply()
		return {true}.apply()
	}
	method getModified() = modified
	method setModified(n) { modified = n }
}

object liberarAFiona {
	var cantidadTrolls = 0
	var solicitante = ""
			
	method solicitante() = solicitante
	method solicitante(_solicitante) { solicitante = _solicitante }
	method cantidadTrolls(cant) { cantidadTrolls = cant }
	method esDificil() {
		const result = (cantidadTrolls > 3) and (cantidadTrolls < 6)
		console.println(result)
		return result
	}
	method puntosRecompensa() = cantidadTrolls * 2
}
			
describe "booleans"{
	
	test "True"{
		assert.that({{true}.apply()}.apply())
	}
	
	test "False"{
		assert.notThat({{false}.apply()}.apply())
	}
	
	test "Null"{
		assert.equals(null, null)
	}
	
	test "And with literals"{
		assert.that({{true}.apply()}.apply() && {{true}.apply()}.apply())
			
		assert.notThat({{true}.apply()}.apply() && {{false}.apply()}.apply())
		assert.notThat({{false}.apply()}.apply() && {{true}.apply()}.apply())
		assert.notThat({{false}.apply()}.apply() && {{false}.apply()}.apply())
	}

test "Or with literals" {
		 
		assert.that({true}.apply() || {true}.apply())
			
		assert.that({true}.apply() || {false}.apply())
		assert.that({false}.apply() || {true}.apply())
		assert.notThat({false}.apply() || {false}.apply())

	}
	
	test "And short cirtuit must evaluate" {

		assert.that({true}.apply() && p.getModifying())
		assert.that(p.getModified())

	}
	 
	test "And short circuit must NOT evaluate"{
		 
		assert.notThat({false}.apply() && p.getModifying())
		assert.notThat(p.getModified())

	}
	
	 
	test "Lazy part of the And short circuit accessing the context" {
		 
		liberarAFiona.cantidadTrolls(5)
		assert.that(liberarAFiona.esDificil())
		
	}
	
	 
	test "Or short cirtuit must evaluate second part" {
		 
		assert.that({false}.apply() || p.getModifying())
		assert.that(p.getModified())

	}
	
	 
	test "Or short circuit must NOT evaluate second part" {
		 
		assert.that({true}.apply() || p.getModifying())
		assert.notThat(p.getModified())
			
	}
	
}
