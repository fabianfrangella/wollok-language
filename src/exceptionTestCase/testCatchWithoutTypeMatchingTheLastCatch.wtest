import wollok.lang.Exception

class AException inherits Exception {  constructor(m) = super(m) }
class BException inherits Exception {  constructor(m) = super(m) }
class CException inherits Exception {  constructor(m) = super(m) }
			
class A { 
	method m1() { throw new CException("hello you see") }
}
			
test "Test catch without type matching the last catch" {
	
	const a = new A()
		try {
			a.m1()
			assert.fail("Should have thrown exception")
		}	
				
		catch e : AException {
			assert.fail("incorrect catch !")
		}
		
		catch e : BException {
			assert.fail("incorrect catch !")
		}
		
		catch e {
		// OK !
		}
		
}