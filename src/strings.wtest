describe "Strings"{
	
	test "String" {
		
		assert.equals("foo", "foo")
		
	}
	
	test "Empty strings" {
		
		assert.equals("","")
		
	}
	
	test "Strings with escape sequences" {
		
		assert.equals("foo\\nbar","foo\\nbar")
		
	}
	
	test "Strings with the escaped escape character without escaping the whole sequence" {
		assert.equals("foo\\\\nbar","foo\\\\nbar")
	}
	
	test "Substring" {
		
		const x = "Hola, wollok!".substring(0, 3)
		assert.equals("Hol", x)
		
	}
	
	test "Less than"{
		
		assert.that("miau" < "ufa")
		
	}
	
	test "Less than false condition"{
		
		assert.notThat("zapallo" <= "ufa")
	}
	
	test "Greater or equal than"{
		
		assert.that("zapallo" >= "ufa")
		assert.that("zapallo" >= "zapallo")
		assert.notThat("aguacero" >= "guarecer")
		
	}
	
	test "Less or equal than for less"{
		
		assert.that("miau" <= "ufa")
		
	}
	
	test "Less or equal than for equal"{
		assert.that("miau" <= "miau")
	}
	
	test "Contains"{
		
		assert.that("aguacate".contains("cat"))
		assert.that("aguacate".contains("agua"))
		assert.notThat("aguacate".contains("managua"))
		assert.notThat("aguacate".contains("AGUA"))
		
	}
	
	test "Index of"{
		
		assert.equals(0, "aguacate".indexOf("agua"))
		assert.equals(4, "aguacate".indexOf("cat"))
		assert.throwsException( {"aguacate".indexOf("trinitrotolueno")} )
		
	}
	
	test "Last Index Of"{
		
		assert.equals(6, "aguacate".lastIndexOf("te"))
		assert.equals(5, "aguacate".lastIndexOf("a"))
		assert.throwsException( {"aguacate".lastIndexOf("trinitrotolueno")} )
		
	}
	
	test "EqualEqual"{
		
		const unString = "perro"
		const otroString = "per" + "ro"
		assert.that(unString == otroString)
		
	}
	
	test "equalsIgnoreCase"{
		assert.that("mARejaDA".equalsIgnoreCase("MAREJADA"))
	}
	
	test "Split"{
		
		const result = "Esto Es una prueba".split(" ")
		const result2 = "Esto|Es|una|prueba".split("|")
		const result3 = "Esto,Es,una,prueba".split(",")
		const comparison = ["Esto", "Es", "una", "prueba"]
		(0..3).forEach { i => assert.that(result.get(i) == comparison.get(i)) }
		(0..3).forEach { i => assert.that(result2.get(i) == comparison.get(i)) }
		(0..3).forEach { i => assert.that(result3.get(i) == comparison.get(i)) }
		
	}
	
	test "Replace"{
		
		const mardel = "Mar del Plata"
		const tuyu = mardel.replace("Plata", "Tuyu")
		assert.that("Mar del Tuyu" == tuyu)
		
	}
	
	test "Random for strings are not allowed anymore"{
		assert.throwsException({ => "fafafa".randomUpTo(8.9)})
	}
	
	test "Take"{
		
		assert.equals("cl", "clearly".take(2))
		assert.equals("clearly", "clearly".take(8))
		assert.equals("", "clearly".take(0))
		
	}
	
	test "Drop" {
		
		assert.equals("early", "clearly".drop(2))
		assert.equals("", "clearly".drop(8))
		assert.equals("clearly", "clearly".drop(0))
		
	}
	
	test "Words"{
		
		const words = "in wollok everything is an object".words()
		assert.equals("in", words.get(0))
		assert.equals("object", words.get(5))
		
	}
	
	test "Capitalize"{
		
		assert.equals("alfa romeo".capitalize(), "Alfa Romeo")
		assert.equals("AUDI".capitalize(), "Audi")
		assert.equals("bmw".capitalize(), "Bmw")
		assert.equals("ONETWO THREE FOUR".capitalize(), "Onetwo Three Four")
		
	}
	
	test "Print string"{
		
		assert.equals("hola".printString(), "\"hola\"")
		assert.equals("3".printString(), "\"3\"")
		
	}
	
	test "Char at using null"{
		
		assert.throwsExceptionWithMessage("La operación charAt no admite parámetros nulos", { "hola".charAt(null) })
	
	}
	
	test "Char at fail"{
		
		assert.throwsExceptionWithMessage("El valor \"a\" no puede convertirse al tipo wollok.lang.Number", { "hola".charAt("a") })

	}
	
	test "Char at"{
		
		assert.equals("l", "hola".charAt(2))
		
	}
	
	test "Starts with using null"{
		
		assert.throwsExceptionWithMessage("La operación startsWith no admite parámetros nulos", { "hola".startsWith(null) })
		
	}
	
	test "startsWith fail"{
		
		assert.throwsExceptionWithMessage("La operación no admite el parámetro a Date[day = 1, month = 1, year = 2018]", { "hola".startsWith(new Date(1, 1, 2018)) })
		
	}
	
	test "startsWith"{
		
		assert.that("hola".startsWith("ho"))
		
	}
	
	test "endsWith using null"{
		
		assert.throwsExceptionWithMessage("La operación endsWith no admite parámetros nulos", { "hola".endsWith(null) })
		
	}
	
	test "endsWith fail"{
		
		assert.throwsExceptionWithMessage("La operación no admite el parámetro a Date[day = 1, month = 1, year = 2018]", { "hola".endsWith(new Date(1, 1, 2018)) })
		
	}
	
	test "endsWith"{
		
		assert.that("hola".endsWith("la"))
		
	}
	
	test "indexOf using null"{
		
		assert.throwsExceptionWithMessage("La operación indexOf no admite parámetros nulos", { "hola".indexOf(null) })
		
	}
	
	test "indexOf fail"{
		
		assert.throwsExceptionWithMessage("La operación no admite el parámetro a Date[day = 1, month = 1, year = 2018]", { "hola".indexOf(new Date(1, 1, 2018)) })
	
	}
	
	test "last indexOf using null"{
		assert.throwsExceptionWithMessage("La operación lastIndexOf no admite parámetros nulos", { "hola".lastIndexOf(null) })
		
	}
	
	test "last indexOf fail"{
		assert.throwsExceptionWithMessage("La operación no admite el parámetro a Date[day = 1, month = 1, year = 2018]", { "hola".lastIndexOf(new Date(1, 1, 2018)) })
		
	}
	
	test "contains using null"{
		
		assert.throwsExceptionWithMessage("La operación contains no admite parámetros nulos", { "hola".contains(null) })
		
	}
	
	test "contains fail"{
		
		assert.throwsExceptionWithMessage("La operación no admite el parámetro a Date[day = 1, month = 1, year = 2018]", { "hola".contains(new Date(1, 1, 2018)) })
		
	}
	
	test "substring 2 using null"{
		
		assert.throwsExceptionWithMessage("La operación substring no admite parámetros nulos", { "hola".substring(null, null) })
		
	}
	
	test "substring 2 fail"{
		
		assert.throwsExceptionWithMessage("El valor \"a\" no puede convertirse al tipo wollok.lang.Number", { "hola".substring("a", "e") })
	
	}
	
	test "substring 1 using null"{
		
		assert.throwsExceptionWithMessage("La operación substring no admite parámetros nulos", { "hola".substring(null) })
		
	}
	
	test "substring 1 fail"{
		
		assert.throwsExceptionWithMessage("El valor \"a\" no puede convertirse al tipo wollok.lang.Number", { "hola".substring("a") })
		
	}
	
	test "equalsIgnorCase null"{
		
		assert.throwsExceptionWithMessage("La referencia aString no está inicializada", { "hola".equalsIgnoreCase(null) })
		
	}
	
	test "equalsIgnoreCase fail"{
		
		assert.throwsExceptionWithMessage("a Date[day = 1, month = 1, year = 2018] no entiende el mensaje toUpperCase() ", { "hola".equalsIgnoreCase(new Date(1, 1, 2018)) })
		
	}
	
	test "replace using null"{
		
		assert.throwsExceptionWithMessage("La operación replace no admite parámetros nulos", { "hola".replace("1", null) })
		assert.throwsExceptionWithMessage("La operación replace no admite parámetros nulos", { "hola".replace(null, "2") })
	
	}
	
	test "replace fail"{
		
		assert.throwsExceptionWithMessage("La operación no admite el parámetro a Date[day = 1, month = 1, year = 2018], a", { "hola".replace(new Date(1, 1, 2018), "a") })
		
	}
	
	
}
