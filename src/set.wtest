class Alumno { 
	var nombre 
	constructor(_nombre) { nombre = _nombre }
}

object manuel {
	var nombre = "ElManu"
}

object a {
	override method printString() = "es un a"
}
		
class B {
	override method printString() = "cierto que era un b!"
}
		

describe "Set test"{
	
	test "union with empty set"{
		
		const aSet = #{1, 2, 3}
		
		assert.equals(aSet, aSet.union(#{}))
		assert.equals(aSet, #{}.union(aSet))
		
	}
	
	test "union with non empty sets"{
		
		const aSet = #{1, 2, 3}
		const anotherSet = #{3, 4, 5}
		const unionSet = #{1, 2, 3, 4, 5}
		
		assert.equals(aSet, aSet.union(aSet))
		assert.equals(unionSet, aSet.union(anotherSet))
		assert.equals(unionSet, anotherSet.union(aSet))
		
	}
	
	test "intersection with empty set"{
		
		const aSet = #{1, 2, 3}
		
		assert.equals(#{}, aSet.intersection(#{}))
		assert.equals(#{}, #{}.intersection(aSet))
		
	}
	
	test "intersection with non empty sets"{
		
		const aSet = #{1, 2, 3}
		const anotherSet = #{3, 4, 5}
		const intersectionSet = #{3}
		
		assert.equals(aSet, aSet.intersection(aSet))
		assert.equals(intersectionSet, aSet.intersection(anotherSet))
		assert.equals(intersectionSet, anotherSet.intersection(aSet))
		
	}
	
	test "difference with empty set"{
		
		const aSet = #{1, 2, 3}
			
		assert.equals(aSet, aSet.difference(#{}))
		assert.equals(#{}, #{}.difference(aSet))
		
	}
	
	test "difference with non empty sets"{
		
		const aSet = #{1, 2, 3}
		const anotherSet = #{3, 4, 5}
		
		assert.equals(#{}, aSet.difference(aSet))
		assert.equals(#{1, 2}, aSet.difference(anotherSet))
		assert.equals(#{4, 5}, anotherSet.difference(aSet))
		
	}
	
	test "equality case true"{
		
		assert.equals(#{'Hello'}, #{'Hello'})
		assert.equals(#{5, 4, 9}, #{4, 5, 9})
		assert.equals(#{true}, #{true})
		assert.equals(#{}, #{})
		
	}
	
	test "equality special cases"{
		
		assert.notEquals(#{3, 4}, #{3})
		assert.notThat(#{3, 4}.equals(#{3}))
		assert.notThat(#{3, 4}.equals(#{3, 8}))
		assert.notThat(#{3, 4}.equals(#{3}))
		assert.notThat(#{3}.equals(#{3, 4}))
		assert.notThat(#{2, 3}.equals(#{3, 4}))
		assert.notThat(#{2, 3, 4}.equals(#{3, 4}))
		assert.notThat(#{3, 4}.equals(#{3.01, 4}))
		assert.that(#{3, 4}.equals(#{2.00 + 1, 4}))
		assert.notThat(#{}.equals(#{3}))
		assert.notThat(#{5}.equals(#{3}))
		assert.notThat(#{5}.equals(#{}))
		
	}
	
	test "equality case false"{
		
		assert.notEquals(#{'Hello'}, #{'Hellou'})
		assert.notEquals(#{5, 4, 9}, #{4, 5, 3})
		assert.notEquals(#{4, 5, 9}, [4, 5, 9])
		
	}
	
	test "elements are unique"{
		
		assert.equals(2, #{"melon", "tomate", "melon"}.size())
		assert.equals(2, #{5, 7, 7, 5, 5, 5, 7, 7, 5, 5, 7}.size())
		
	}
	
	test "elements are unique with common representations"{
		
		assert.equals(4, #{"4", 4.01, 4, "Cuatro"}.size())
		
	}
	
	test "elements are unique for classes"{

		assert.equals(3, #{new Alumno("juan"), new Alumno("manuel"), new Alumno("juan")}.size())

	}
	
	test "elements are unique for classes and objects"{
		
		var juancete = new Alumno("juan")
		assert.equals(2, #{juancete, manuel, juancete, manuel, manuel}.size())
		
	}
	
	test "anyOne on set throwsException when empty"{
		
		assert.equals(1, #{1}.anyOne())
		assert.throwsExceptionWithMessage(
			"Operación {0} no permitida en colecciones vacías", //¿No debería especificar que la operación es anyOne? 
			{ #{}.anyOne() })
			
	}
	
	test "elements to string"{
		assert.throwsExceptionWithMessage(
			"Expected [#{a[]}] but found [#{un/a  B[]}]", 
			{ assert.equals(#{a}, #{new B()}) }
		)
	}
}
