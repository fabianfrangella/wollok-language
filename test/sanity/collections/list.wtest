object a {
	override method printString() = "es un a"
}
		
describe "List tests"{
	
	test "subList" {
		
		const numbers = [22, 2, 10]
		assert.equals([22,2], numbers.subList(0,1))
		assert.equals([22,2,10], numbers.subList(0,2))
		assert.equals([2,10], numbers.subList(1,2))
		assert.equals([2], numbers.subList(1,1))
		 
	}
	 
	test "subList unhappy path" {
		 
		const numbers = [22, 2, 10]
		assert.equals([], [].subList(0,1))
		assert.equals([], [].subList(1,0))
		assert.equals([22,2,10], numbers.subList(0,25))

	}
	
	test "take" {
		 
		const numbers = [22, 2, 10]
		assert.equals([], numbers.take(-1))
		assert.equals([], numbers.take(0))
		assert.equals([22], numbers.take(1))
		assert.equals([22,2], numbers.take(2))
		assert.equals([22,2,10], numbers.take(3))
		assert.equals([22,2,10], numbers.take(4))
		assert.equals([22,2,10], numbers)
		
	}
	 
	test "take unhappy path" {
		 
		assert.equals([], [].take(-1))
		assert.equals([], [].take(0))
		assert.equals([], [].take(1))
		assert.equals([], [].take(2))
	
	}
	 
	test "drop" {
		 
		const numbers = [22, 2, 10]
		assert.equals([22,2,10], numbers.drop(-1))
		assert.equals([22,2,10], numbers.drop(0))
		assert.equals([2,10], numbers.drop(1))			
		assert.equals([10], numbers.drop(2))
		assert.equals([], numbers.drop(3))
		assert.equals([], numbers.drop(4))
		assert.equals([22,2,10], numbers)

	}
	 
	test "drop unhappy path" {
		 
		assert.equals([], [].drop(-1))
		assert.equals([], [].drop(0))
		assert.equals([], [].drop(1))
		assert.equals([], [].drop(2))

	}	
	
	test "reverse" {
		assert.equals([10,2,22], [22, 2, 10].reverse())
		assert.equals([], [].reverse())
		assert.equals([2], [2].reverse())			
	}
	 
	test "printing duplicated elements"{
		 
		const l1 = [[3,5,2], [4,2,6]].flatten()
		assert.equals("[3, 5, 2, 4, 2, 6]", l1.toString())
		const l2 = [1,2,3].flatMap({x => [x, x * 2, x * 3]})
		assert.equals("[1, 2, 3, 2, 4, 6, 3, 6, 9]", l2.toString())
		const l3 = [1,1,1]
		assert.equals("[1, 1, 1]", l3.toString())

	}
 
	test "equality case true" {
		 
		assert.equals(['Hello'], ['Hello'])
		assert.equals([4, 5, 9], [4, 5, 9])
		assert.equals([true], [true])
		assert.equals([], [])
	
	}
			
	test "equality case false" {
		 
		assert.notEquals(['Hello'], ['Hellou'])
		assert.notEquals([4, 5, 9], [5, 4, 9])
		assert.notEquals([4, 5, 9], [5, 4])
		assert.notThat([4, 5, 9].equals([5, 4]))
		assert.notThat([4, 5, 9].equals([5, 4, 9]))
		assert.notEquals([4, 5, 9], #{4, 5, 9})
		assert.notThat([5, 4].equals([4, 5, 9]))
		assert.notThat([5, 4].equals([5, 4, 9]))
		assert.notThat([5, 4].equals([]))
		assert.notThat([].equals([5, 4]))

	}	

	test "without duplicates" {
		assert.equals([1, 3, 1, 5, 1, 3, 2, 5].withoutDuplicates(), [1, 3, 5, 2])
		assert.equals([1, 3, 5, 2].withoutDuplicates(), [1, 3, 5, 2])
	}	
	
	test "sortBy" {
		const numbers = [ 22, 2, 10 ]
		numbers.sortBy({ a , b => a > b})
		assert.equals([ 22, 10, 2 ], numbers)
		numbers.sortBy({ a , b => a < b})
		assert.equals([ 2, 10, 22 ], numbers)
	}

	test "sortedBy" {
		const numbers = [ 22, 2, 10 ]
		assert.equals([ 22, 10, 2 ], numbers.sortedBy({ a , b => a > b}))
		assert.equals([ 2, 10, 22 ], numbers.sortedBy({ a , b => a < b}))
	}

	test "get happy path"{
		 
		const numbers = [22, 2, 10]
		assert.equals(22, numbers.get(0))

	}		

	test "get unhappy path" {
		 
		const numbers = [22, 2, 10]
		assert.throwsException({ numbers.get(-1) })
		
	}		
	
}
