describe "Number extensions test"{
	
	test "Max"{
	
		assert.equals(1.max(2), 2)
		assert.equals((1.0).max(2), 2)
		assert.equals(1.max(2.0), 2.0)
		assert.equals((1.0).max(2.0), 2.0)
		assert.equals(2.max(1), 2)
		assert.equals((2.0).max(1), 2.0)
		assert.equals(2.max(1.0), 2)
		assert.equals((2.0).max(1.0), 2.0)
	}
	
	test "Min"{
		
		assert.equals(1.min(2), 1)
		assert.equals((1.0).min(2), 1.0)
		assert.equals(1.min(2.0), 1)
		assert.equals((1.0).min(2.0), 1.0)
		assert.equals(2.min(1), 1)
		assert.equals((2.0).min(1), 1)
		assert.equals(2.min(1.0), 1.0)
		assert.equals((2.0).min(1.0), 1.0)

	}
	
	test "Abs"{
		
		assert.equals(1.abs(), 1)
		assert.equals((-1).abs(), 1)
		assert.equals((1.0).abs(), 1.0)
		assert.equals((-1.0).abs(), 1.0)
		
	}
	
	test "Limit Between"{
		
		assert.equals(1.limitBetween(2,3), 2)
		assert.equals((1.0).limitBetween(2,3), 2)
		assert.equals(1.limitBetween(2.0,3), 2.0)
		assert.equals((1.0).limitBetween(2.0,3), 2.0)

		assert.equals(4.limitBetween(2,3), 3)
		assert.equals((4.0).limitBetween(2,3), 3)
		assert.equals(4.limitBetween(2,3.0), 3.0)
		assert.equals((4.0).limitBetween(2,3.0), 3.0)
		
		assert.equals(4.limitBetween(2,10), 4)
		assert.equals((4.0).limitBetween(2,10), 4.0)
			
		assert.equals(1.limitBetween(3,2), 2)
		assert.equals((1.0).limitBetween(3,2), 2)
		assert.equals(1.limitBetween(3,2.0), 2.0)
		assert.equals((1.0).limitBetween(3,2.0), 2.0)

		assert.equals(4.limitBetween(3,2), 3)
		assert.equals((4.0).limitBetween(3,2), 3)
		assert.equals(4.limitBetween(3.0,2), 3.0)
		assert.equals((4.0).limitBetween(3.0,2), 3.0)
			
		assert.equals(4.limitBetween(10,2), 4)
		assert.equals((4.0).limitBetween(10,2), 4.0)
	}
			
}