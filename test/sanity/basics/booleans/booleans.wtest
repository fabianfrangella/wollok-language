/**
 * Tests for Wollok booleans
 */
object p {
	var modified = {false}.apply()
				
	method getModifying() {
		modified = {true}.apply()
		return {true}.apply()
	}
	method getModified() = modified
	method setModified(n) { modified = n }
}

// TODO: Replace this kind of examples with smaller inlined ones
object liberarAFiona {
	var cantidadTrolls = 0
	var solicitante = ""
			
	method solicitante() = solicitante
	method solicitante(_solicitante) { solicitante = _solicitante }
	method cantidadTrolls(cant) { cantidadTrolls = cant }
	method esDificil() {
		const result = (cantidadTrolls > 3) && (cantidadTrolls < 6)
		return result
	}
	method puntosRecompensa() = cantidadTrolls * 2
}
			
describe "booleans" {
	
	test "True literal used in an assert" {
		assert.that(true)
	}

	test "False literal used in an assert" {
		assert.notThat(false)
	}

	test "Obtaining true from a closure" {
		assert.that({{true}.apply()}.apply())
	}
	
	test "False"{
		assert.notThat({{false}.apply()}.apply())
	}
	
	test "Null"{
		assert.equals(null, null)
	}
	
	test "And operator used with literals true and false" {
		assert.that(true && true)
		assert.that(true and true)
		
		assert.notThat(true && false)
		assert.notThat(true and false)

		assert.notThat(false && true)
		assert.notThat(false and true)

		assert.notThat(false && false)
		assert.notThat(false and false)
	}	

	test "Or operator used with literals true and false" {
		assert.that(true || true)
		assert.that(true or true)

		assert.that(true || false)
		assert.that(true or false)

		assert.that(false || true)
		assert.that(false or true)

		assert.notThat(false || false)
		assert.notThat(false or false)
	}

	test "Using and operator with closures" {
		assert.that({{true}.apply()}.apply() && {{true}.apply()}.apply())
			
		assert.notThat({{true}.apply()}.apply() && {{false}.apply()}.apply())
		assert.notThat({{false}.apply()}.apply() && {{true}.apply()}.apply())
		assert.notThat({{false}.apply()}.apply() && {{false}.apply()}.apply())
	}

	test "Or with literals" {
		assert.that({true}.apply() || {true}.apply())
		assert.that({true}.apply() || {false}.apply())
		assert.that({false}.apply() || {true}.apply())
		assert.notThat({false}.apply() || {false}.apply())
	}
	
	test "And short cirtuit must evaluate" {
		assert.that({true}.apply() && p.getModifying())
		assert.that(p.getModified())
	}
	 
	test "And short circuit must NOT evaluate"{
		assert.notThat({false}.apply() && p.getModifying())
		assert.notThat(p.getModified())
	}
	
	test "Lazy part of the And short circuit accessing the context" {
		liberarAFiona.cantidadTrolls(5)
		assert.that(liberarAFiona.esDificil())
	}
	
	test "Or short cirtuit must evaluate second part when first condition is not satisfied" {
		assert.that({false}.apply() || p.getModifying())
		assert.that(p.getModified())
	}
	
	test "Or short circuit must NOT evaluate second part when first condition is satisfied" {
		assert.that({true}.apply() || p.getModifying())
		assert.notThat(p.getModified())
	}
	
}
