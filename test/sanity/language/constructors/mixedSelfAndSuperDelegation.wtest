class A {
	var x
	var y
	constructor(p) = self(p.getX(), p.getY()) {}
	constructor(_x,_y) { x = _x ; y = _y }

	method getX() { return x }
	method getY() { return y }
}

class B inherits A { 
	constructor(p) = super(p + 10) {}
}

class C inherits B {
	constructor(_x, _y) = self(new Point(_x, _y)) {}
	constructor(p) = super(p) {}
}

class Point {
	var x
	var y
	constructor(_x,_y) { x = _x ; y = _y }
	method +(delta) {
		x += delta
		y += delta
		return self
	}

	method getX() { return x }
		method getY() { return y }
}

test "mixed self and super delegation" {
	const o = new C(10, 20)
	assert.equals(20, o.getX())
	assert.equals(30, o.getY())
}
