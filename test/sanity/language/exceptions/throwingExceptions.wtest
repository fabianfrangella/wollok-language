class UserException inherits Exception {
   var valorInvalido = 0
}

object monedero {
	var plata = 500

	method poner(cantidad) {
		if (cantidad < 0) {
			throw new UserException(message="La cantidad debe ser positiva", valorInvalido=cantidad)
		} 
		plata += cantidad
	}

	method sacar(cantidad) { plata -= cantidad }
}

class SpecialClass {
	method foo() {
		self.error("Gently failing!")
	}
}

object cuenta {
	method sacar(c) {
		try {
			if (c > 0)
			throw new Exception(message = "saldo insuficiente")
			return 19
		} 
		catch e {
			return 20
		}
	}
}

object cuenta2 {
	method sacar(c) = try { 
		if (c > 0) 
		throw new Exception("saldo insuficiente") 
		else 19
	} catch e {
		20
	}
}

describe "throwing exceptions" {

	test "exception from native method gets wrapped into a Wollok exception" {
		assert.throwsException { 2 / 0 }
	}

	test "exception with message" {
		try {
			monedero.poner(-2)
			assert.fail("No should get here")
		} catch e {
			assert.equals("La cantidad debe ser positiva", e.message())
		}
	}

	test "error method on wollok object" {
		try {
			const specialClass = new SpecialClass()
			specialClass.foo()
		}
		catch e {
			// OK !
			assert.equals("Gently failing!", e.message())
		}
	}

	test "catch with a return statement returning from try body and from catch" {
		assert.equals(20, cuenta.sacar(10))
		assert.equals(19, cuenta.sacar(0))
	}

	test "Test catch evaluation in a shortcut method" {
		assert.equals(20, cuenta.sacar(10))
		assert.equals(19, cuenta.sacar(0))
	}

	test "assert throws exception failing" {
		var a = 0
		assert.throwsExceptionLike(
			// TODO NicoS: es posible hacer que wollok-ts nos dé el código acá?
			new AssertionException(message = "Block { a + 1 } should have failed"),
			{ assert.throwsException({ a + 1 }) }
		)
	}

}
