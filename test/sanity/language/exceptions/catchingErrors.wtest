/**
  * Scenario: a class defining a method with try/catch and returning 
  * different values
  */
object cuenta {
  method sacar(monto) {
    try {
      if (monto > 0) throw new Exception("saldo insuficiente")
      return 19
    } 
    catch e {
      return 20
    }
  }

}

/**
  * Tests
  */
describe "catching errors" {

  test "method returning a value from a normal flow" {
    assert.equals(19, cuenta.sacar(0))
  }

  test "method returning a value from a catch" {
    assert.equals(20, cuenta.sacar(10))
  }

  test "try expression should be usable as message argument, even with multiline body" {
    const o = object {
      method add(a, b, c) = a + b + c
    }

    assert.equals(6, o.add(1, try { 0 ; 2 } catch e { 0 }, 3))
    assert.equals(6, o.add(1, try { 0 ; 2 } then always { 0 }, 3))
    assert.equals(6, o.add(1, try { 0 ; 2 } catch e { 0 } then always { 0 }, 3))
    assert.equals(6, o.add(1, try { 0; throw new Exception() } catch e { 0 ; 2 }, 3))
    assert.equals(6, o.add(1, try { 0; throw new Exception() } catch e { 0 ; 2 } then always { 0 }, 3))
  }

}