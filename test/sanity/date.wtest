describe "Date tests"{
	
	test "two dates are equals because they have no time" {
		 
		const now1 = new Date()
		const now2 = new Date() 
		assert.that(now1.equals(now2))
		assert.that(now1 == now2)
		 
	}

	test "two equal dates can be different object" {
		 
		const now1 = new Date()
		const now2 = new Date() 
		assert.that(now1 == now2)
		assert.that(now1 !== now2)
		 
	}
	
	 
	test "year 2000 was leap" {
		 
		const year2000 = new Date(day=4, month=5, year=2000)
		assert.that(year2000.isLeapYear())
		 
	}

	 
	test "year 2000 was leap with decimals" {
		 
		const year2000 = new Date(day=4, month=5.1, year=2000.7)
		assert.that(year2000.isLeapYear())
		 
	}
	 
	test "year 2001 was not leap" {
		 
		const year2001 = new Date(day=4, month=5, year=2001)
		assert.notThat(year2001.isLeapYear())
		 
	}

	 
	test "year 2004 was leap" {
		 
		const year2004 = new Date(day=4, month=5, year=2004)
		assert.that(year2004.isLeapYear())
		 
	}

	 
	test "year 2100 was not leap" {
		 
		const year2100 = new Date(day=4, month=5, year=2100)
		assert.notThat(year2100.isLeapYear())
		 
	}

	 
	test "yesterday is less than today" {
		 
		var yesterday = new Date()
		yesterday = yesterday.minusDays(1)
		const today = new Date()
		assert.that(yesterday < today) 
		 
	}

	 
	test "a previous date is less than today" {
		const previous = new Date(day=10, month=6, year=2001)
		const today = new Date()
		assert.that(previous < today) 
	}

	 
	test "today is between yesterday and tomorrow" {
		 
		var yesterday = new Date()
		yesterday = yesterday.minusDays(1)
		const today = new Date()
		var tomorrow = new Date()
		tomorrow = tomorrow.plusDays(1)
		assert.that(today > yesterday)
		assert.that(today >= yesterday)
		assert.that(today < tomorrow)
		assert.that(today <= tomorrow)
		assert.that(today.between(yesterday, tomorrow)) 
		 
	}
	
	 
	test "tuesday is second day of week" {
		const aDay = new Date(day=7, month=6, year=2016)
		assert.equals(aDay.dayOfWeek(), tuesday) 
	}

	 
	test "difference between dates positive" {
		 
		const day1 = new Date(day=7, month=6, year=2016)
		const day2 = new Date(day=9, month=7, year=2016)
		assert.equals(day2 - day1, 32) 
		 
	}

	 
	test "difference between dates negative" {
		 
		const day1 = new Date(day=7, month=6, year=2016)
		const day2 = new Date(day=9, month=7, year=2016)
		assert.equals(day1 - day2, -32) 
		 
	}
	
	 
	test "difference between equal Dates" {
		 
		const day1 = new Date()
		const day2 = new Date()
		assert.equals(day2 - day1, 0) 
		 
	}

	 
	test "add two months" {
		 
		const originalDay = new Date(day=31, month=12, year=2015)
		const finalDay = new Date(day=29, month=2, year=2016)
		const result = originalDay.plusMonths(2)
		assert.that(result.equals(finalDay))
		 
	}

	 
	test "subtract two months" {
		 
		const originalDay = new Date(day=29, month=2, year=2016)
		const finalDay = new Date(day=29, month=12, year=2015)
		const result = originalDay.minusMonths(2)
		assert.that(result.equals(finalDay))
		 
	}

	 
	test "subtract two months passing decimals" {
		 
		const originalDay = new Date(day=29, month=2, year=2016)
		const finalDay = new Date(day=29, month=12, year=2015)
		const result = originalDay.minusMonths(2.4)
		assert.that(result.equals(finalDay))
		 
	}

	 
	test "add one year" {
		 
		const originalDay = new Date(day=29, month=2, year=2016)
		const finalDay = new Date(day=28, month=2, year=2017)
		const result = originalDay.plusYears(1)
		assert.that(result.equals(finalDay))
		 
	}

	 
	test "subtract one year"{
		const originalDay = new Date(day=28, month=2, year=2017)
		const finalDay = new Date(day=28, month=2, year=2016)
		const result = originalDay.minusYears(1)
		assert.that(result.equals(finalDay))
	}
		
	 
	test "to string default test" {
		const aDay = new Date(day=28, month=12, year=2016)
		assert.equals("12/28/2016", aDay.toString())
	}
	
	 
	test "to string with a 1 digit month Test" {
		const aDay = new Date(day=28, month=2, year=2016)
		assert.equals("2/28/2016", aDay.toString())
	}

	 
	test "plus days using null" {
		assert.throwsException({ new Date(day=28, month=2, year=2017).plusDays(null) })
	}
	
	 
	test "plus months using null" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).plusMonths(null) })
		 
	}
	
	 
	test "plus years using null" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).plusYears(null) })
		 
	}
	
	 
	test "difference fail" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017) - "2" })
		 
	}
	 
	test "minus days using null" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).minusDays(null) })
		 
	}
	
	 
	test "minus months using null" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).minusMonths(null) })
		 
	}
	
	 
	test "minus years using null" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).minusYears(null) })
		 
	}
	
	 
	test "between fail" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).between(2, 9) })
		 
	}
	 
	test "between null" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017).between(null, null) })
		 
	}
	 
	test "greater than fail" {
		 
		assert.throwsException({ new Date(day=28, month=2, year=2017) > 2 })
		 
	}
	 
	test "plus days Fail" {
		 
		assert.throwsException( { new Date(day=2, month=2, year=2017).plusDays("a") })
		 
	}
	
	 
	test "plus months Fail" {
		 
		assert.throwsException( { new Date(day=2, month=2, year=2017).plusMonths("a") })
		 
	}
	
	 
	test "plus years fail" {
		 
		assert.throwsException( { new Date(day=2, month=2, year=2017).plusYears("a") })
		 
	}
	
	 
	test "minus days fail" {
		 
		assert.throwsException( { new Date(day=2, month=2, year=2017).minusDays("a") })
		 
	}
	
	 
	test "minus months fail" {
		 
		assert.throwsException( { new Date(day=2, month=2, year=2017).minusMonths("a") })
		 
	}
	
	 
	test "minus years fail" {
		 
		assert.throwsException( { new Date(day=2, month=2, year=2017).minusYears("a") })
		 
	}


	// TODO: this test desn't look good What exactly are we testing here?
	test "all operations returning dates are correct wollok dates" {
		assert.that(new Date().minusDays(1).day() !== null)
		assert.that(new Date().minusDays(1).month() !== null)
		assert.that(new Date().minusDays(1).year() !== null)
		assert.that(new Date().plusDays(1).day() !== null)
		assert.that(new Date().plusDays(1).month() !== null)
		assert.that(new Date().plusDays(1).year() !== null)
		assert.that(new Date().minusYears(1).day() !== null)
		assert.that(new Date().minusYears(1).month() !== null)
		assert.that(new Date().minusYears(1).year() !== null)
		assert.that(new Date().plusYears(1).day() !== null)
		assert.that(new Date().plusYears(1).month() !== null)
		assert.that(new Date().plusYears(1).year() !== null)
	}
}